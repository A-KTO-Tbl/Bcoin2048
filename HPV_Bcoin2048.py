from requests import post
from threading import Thread, Lock
from os import system as sys
from platform import system as s_name
from time import sleep
from random import randint, shuffle
from colorama import Fore
from typing import Literal
from datetime import datetime, timedelta
from urllib.parse import unquote
from itertools import cycle

from Core.Tools.HPV_Getting_File_Paths import HPV_Get_Accounts
from Core.Tools.HPV_Proxy import HPV_Proxy_Checker
from Core.Tools.HPV_User_Agent import HPV_User_Agent







class HPV_Bcoin2048:
    '''
    AutoBot Ferma /// HPV
    ---------------------
    [1] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –∏ –∑–∞–ø—É—Å–∫ –∏—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è`
    
    [2] - `–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 6 –¥–æ 7 —á–∞—Å–æ–≤`
    
    [3] - `–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ 6-7 —á–∞—Å–æ–≤`
    '''



    def __init__(self, Name: str, URL: str, Proxy: dict) -> None:
        self.Name = Name                   # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.Token = self.URL_Clean(URL)   # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ mini app
        self.Proxy = Proxy                 # –ü—Ä–æ–∫—Å–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
        self.UA = HPV_User_Agent()         # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ User Agent
        self.Domain = 'https://pipipupu.ru/api/v2' # –î–æ–º–µ–Ω –∏–≥—Ä—ã



    def URL_Clean(self, URL: str) -> str:
        '''–û—á–∏—Å—Ç–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'''

        try:
            return unquote(URL.split('#tgWebAppData=')[1].split('&tgWebAppVersion')[0])
        except:
            return ''



    def Current_Time(self) -> str:
        '''–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è'''

        return Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'



    def Logging(self, Type: Literal['Success', 'Warning', 'Error'], Name: str, Smile: str, Text: str) -> None:
        '''–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''

        with Console_Lock:
            COLOR = Fore.GREEN if Type == 'Success' else Fore.YELLOW if Type == 'Warning' else Fore.RED # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            DIVIDER = Fore.BLACK + ' | '   # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            Time = self.Current_Time()     # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            Name = Fore.MAGENTA + Name     # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
            Smile = COLOR + str(Smile)     # –°–º–∞–π–ª–∏–∫
            Text = COLOR + Text            # –¢–µ–∫—Å—Ç –ª–æ–≥–∞

            print(Time + DIVIDER + Smile + DIVIDER + Text + DIVIDER + Name)



    def Random_List(self) -> list:
        '''–†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞'''

        NEW_List = ['UP', 'DOWN', 'LEFT', 'UP', 'RIGHT', 'DOWN', 'LEFT', 'UP', 'RIGHT', 'DOWN', 'LEFT', 'UP', 'RIGHT', 'DOWN', 'LEFT', 'UP']
        shuffle(NEW_List)

        return NEW_List



    def Get_Info(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∏ –¥–æ—Å—Ç—ã–Ω—Ö –∏–≥—Ä–∞—Ö'''

        Headers = {'Accept-Language': 'ru,en;q=0.9,uz;q=0.8', 'Connection': 'keep-alive', 'Origin': 'https://pipipupu.ru', 'Referer': 'https://pipipupu.ru/appezdish', 'Sec-Fetch-Dest': 'empty', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Site': 'same-origin', 'User-Agent': self.UA, 'accept': '*/*', 'authorization': '', 'content-type': 'application/json', 'telegram-init-data': self.Token}
        Json = {'operationName': 'GetViewer', 'variables': {}, 'query': 'query GetViewer {\n  viewer {\n    id\n    energyUnits\n    nextEnergyUnitsAt\n    bicoinBalance\n    name\n    inviteesCount\n    inviteesInviteesCount\n    inviteesReward\n    inviteesInviteesReward\n    allTimeEarnedBicoins\n    photoURL\n    bestGameEver {\n      bicoinReward\n      score\n      __typename\n    }\n    bestGameDaily {\n      bicoinReward\n      score\n      __typename\n    }\n    features\n    inviterId\n    hadClaimedFirst2048Reward\n    isBot\n    deleteTileBoostersCount\n    moveBackBoostersCount\n    moveWithoutTileBoostersCount\n    adsWatchedToday\n    __typename\n  }\n}'}

        try:
            HPV = post(self.Domain, headers=Headers, json=Json, proxies=self.Proxy).json()['data']['viewer']

            Games = HPV['energyUnits'] # –ö–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä
            Balance = HPV['bicoinBalance'] * 1000 # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å

            return {'Status': True, 'Games': Games, 'Balance': f'{Balance:,.0f}'}
        except:
            return {'Status': False}



    def Play(self) -> None:
        '''–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã'''

        Headers_0 = {'Accept-Language': 'ru,en;q=0.9,uz;q=0.8', 'Connection': 'keep-alive', 'Origin': 'https://pipipupu.ru', 'Referer': 'https://pipipupu.ru/appezdish/game', 'Sec-Fetch-Dest': 'empty', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Site': 'same-origin', 'User-Agent': self.UA, 'accept': '*/*', 'authorization': '', 'content-type': 'application/json', 'telegram-init-data': self.Token}
        Headers_1 = {'Accept-Language': 'ru,en;q=0.9,uz;q=0.8', 'Connection': 'keep-alive', 'Origin': 'https://pipipupu.ru', 'Referer': 'https://pipipupu.ru/appezdish', 'Sec-Fetch-Dest': 'empty', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Site': 'same-origin', 'User-Agent': self.UA, 'accept': '*/*', 'authorization': '', 'content-type': 'application/json', 'telegram-init-data': self.Token}
        Headers_2 = {'Accept-Language': 'ru,en;q=0.9,uz;q=0.8', 'Connection': 'keep-alive', 'Origin': 'https://pipipupu.ru', 'Referer': 'https://pipipupu.ru/appezdish/game', 'Sec-Fetch-Dest': 'empty', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Site': 'same-origin', 'User-Agent': self.UA, 'accept': '*/*', 'authorization': '', 'content-type': 'application/json', 'telegram-init-data': self.Token}
        Headers_3 = {'Accept-Language': 'ru,en;q=0.9,uz;q=0.8', 'Connection': 'keep-alive', 'Origin': 'https://pipipupu.ru', 'Referer': 'https://pipipupu.ru/appezdish/game', 'Sec-Fetch-Dest': 'empty', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Site': 'same-origin', 'User-Agent': self.UA, 'accept': '*/*', 'authorization': '', 'content-type': 'application/json', 'telegram-init-data': self.Token}
        Json_0 = {'operationName': 'myLastGame', 'variables': {}, 'query': 'query myLastGame {\n  MyLastGame {\n    id\n    status\n    field\n    nextTiles\n    nextIndexes\n    deletedTiles\n    __typename\n  }\n}'}
        Json_1 = {'operationName': 'startGame', 'variables': {}, 'query': 'mutation startGame {\n  StartGame {\n    id\n    status\n    field\n    nextIndexes\n    nextTiles\n    deletedTiles\n    __typename\n  }\n}'}

        try:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏–≥—Ä—ã
                GID = post(self.Domain, headers=Headers_1, json=Json_1, proxies=self.Proxy).json()['data']['StartGame']['id']
            except:
                GID = post(self.Domain, headers=Headers_0, json=Json_0, proxies=self.Proxy).json()['data']['MyLastGame']['id']

            # –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–æ–≤
            for _ in range(randint(17, 32)):
                try:
                    Json_2 = {'operationName': 'sendMovesButch', 'variables': {'data': {'gameId': GID, 'moves': self.Random_List(), 'addedTiles': []}}, 'query': 'mutation sendMovesButch($data: GameMovesInput!) {\n  SendMovesButch(data: $data) {\n    id\n    field\n    status\n    nextIndexes\n    nextTiles\n    deletedTiles\n    __typename\n  }\n}'}
                    post(self.Domain, headers=Headers_2, json=Json_2, proxies=self.Proxy)
                    sleep(randint(12, 23))
                except:pass

            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
            Json_3 = {'operationName': 'CancelGame', 'variables': {'gameID': GID}, 'query': 'mutation CancelGame($gameID: ID!) {\n  CancelGame(gameID: $gameID)\n}'}
            post(self.Domain, headers=Headers_3, json=Json_3, proxies=self.Proxy).json()['data']
            self.Logging('Success', self.Name, 'üéÆ', '–ò–≥—Ä–∞ —Å—ã–≥—Ä–∞–Ω–∞!')
        except:
            self.Logging('Error', self.Name, 'üî¥', '–ò–≥—Ä–∞ –Ω–µ —Å—ã–≥—Ä–∞–Ω–∞!')



    def Run(self) -> None:
        '''–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞'''

        while True:
            try:
                INFO = self.Get_Info() # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∏ –¥–æ—Å—Ç—ã–Ω—Ö –∏–≥—Ä–∞—Ö

                if INFO['Status']: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
                    self.Logging('Success', self.Name, 'üü¢', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
                    self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {INFO["Balance"]}')

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –∏ –∑–∞–ø—É—Å–∫ –∏—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                    Get_plays = INFO['Games']
                    if Get_plays > 0:
                        self.Logging('Success', self.Name, 'üéÆ', f'–ò–≥—Ä –¥–æ—Å—Ç—É–ø–Ω–æ: {Get_plays}!')
                        for _ in range(Get_plays):
                            self.Play()
                            sleep(randint(12, 23))

                        self.Logging('Success', self.Name, 'üí∞', f'–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∏–≥—Ä: {self.Get_Info()["Balance"]}')

                    Waiting = randint(22_000, 25_000) # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                    Waiting_STR = (datetime.now() + timedelta(seconds=Waiting)).strftime('%Y-%m-%d %H:%M:%S') # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ

                    self.Logging('Warning', self.Name, '‚è≥', f'–ò–≥—Ä –±–æ–ª—å—à–µ –Ω–µ—Ç! –°–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ä—Ç –∏–≥—Ä: {Waiting_STR}!')

                    sleep(Waiting) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 6 –¥–æ 7 —á–∞—Å–æ–≤

                else: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞
                    self.Logging('Error', self.Name, 'üî¥', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!')
                    continue
            except:
                pass







if __name__ == '__main__':
    sys('cls') if s_name() == 'Windows' else sys('clear')

    Console_Lock = Lock()
    Proxy = HPV_Proxy_Checker()

    def Start_Thread(Account, URL, Proxy = None):
        Bcoin2048 = HPV_Bcoin2048(Account, URL, Proxy)
        Bcoin2048.Run()

    for Account, URL in HPV_Get_Accounts().items():
        if Proxy:
            Proxy = cycle(Proxy)
            Thread(target=Start_Thread, args=(Account, URL, next(Proxy),)).start()
        else:
            Thread(target=Start_Thread, args=(Account, URL,)).start()


